     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fopen, fclose, fprintf, printf, gets               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll  
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fprintf msvcrt.dll      ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  import gets msvcrt.dll                         ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 456E74657220746865-         msg1 db "Enter the file name: ", 0
    19 00000009 2066696C65206E616D-
    19 00000012 653A2000           
    20 00000016 456E74657220746865-         msg2 db "Enter the text: ", 10, 0
    20 0000001F 20746578743A200A00 
    21 00000028 <res 0000001E>              fileName resb 30
    22 00000046 257300                      format1 db "%s", 0
    23 00000049 20255B5E0A5D00              format2 db ` %[^\n]`, 0
    24 00000050 7700                        mode db "w", 0
    25 00000052 FFFFFFFF                    fileDescriptor dd -1
    26 00000056 <res 00000078>              text resb 120
    27                                      
    28                                      
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; ...
    34 00000000 68[00000000]                    push msg1
    35 00000005 FF15[00000000]                  call [printf]
    36 0000000B 83C404                          add esp, 4
    37                                          
    38 0000000E 68[28000000]                    push fileName
    39 00000013 68[46000000]                    push format1
    40 00000018 FF15[00000000]                  call [scanf]
    41 0000001E 83C408                          add esp, 8
    42                                          
    43 00000021 68[50000000]                    push mode
    44 00000026 68[28000000]                    push fileName
    45 0000002B FF15[00000000]                  call [fopen]
    46 00000031 83C408                          add esp, 8
    47                                          
    48 00000034 83F800                          cmp eax, 0
    49 00000037 743F                            je .end
    50                                          
    51 00000039 A3[52000000]                    mov [fileDescriptor], eax
    52                                          
    53 0000003E 68[16000000]                    push msg2
    54 00000043 FF15[00000000]                  call [printf]
    55 00000049 83C404                          add esp, 4
    56                                          
    57 0000004C 68[56000000]                    push text
    58 00000051 68[49000000]                    push format2
    59 00000056 FF15[00000000]                  call [scanf]
    60 0000005C 83C408                          add esp, 8
    61                                          
    62 0000005F 68[56000000]                    push text
    63 00000064 68[46000000]                    push format1
    64 00000069 FF35[52000000]                  push dword [fileDescriptor]
    65 0000006F FF15[00000000]                  call [fprintf]
    66 00000075 83C40C                          add esp, 12
    67                                          
    68                                   
    69                                          .end:
    70                                          
    71                                          
    72                                          
    73                                          
    74                                      
    75                                          ; exit(0)
    76 00000078 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 0000007A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
