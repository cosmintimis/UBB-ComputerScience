     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll                         ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll                           ; Read three numbers a, m and n (a: word, 0 <= m, n <= 15, m > n) from the keyboard. Isolate the bits m-n of a and display the integer represented by those bits in 
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 <res 00000002>              a resw 1
    15 00000002 <res 00000001>              m resb 1
    16 00000003 <res 00000001>              n resb 1
    17 00000004 256864256864256864-         format db "%hd%hd%hd", 0
    17 0000000D 00                 
    18 0000000E 25686400                    format2 db "%hd", 0
    19 00000012 25687800                    format3 db "%hx", 0
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                       
    26 00000000 68[03000000]                    push n
    27 00000005 68[02000000]                    push m
    28 0000000A 68[00000000]                    push a
    29 0000000F 68[04000000]                    push format
    30 00000014 FF15[00000000]                  call [scanf]
    31 0000001A 83C410                          add esp, 16
    32                                          
    33 0000001D 66A1[00000000]                  mov ax, [a]
    34 00000023 B110                            mov cl, 16
    35 00000025 2A0D[03000000]                  sub cl, [n]
    36 0000002B 80E901                          sub cl, 1
    37                                          
    38 0000002E 66D3E0                          shl ax, cl
    39                                          
    40 00000031 020D[02000000]                  add cl, [m]
    41 00000037 66D3E8                          shr ax, cl
    42                                          
    43 0000003A 6650                            push ax
    44 0000003C 68[12000000]                    push format3
    45 00000041 FF15[00000000]                  call [printf]
    46 00000047 83C406                          add esp,6 
    47                                          
    48                                      
    49                                          ; exit(0)
    50 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
