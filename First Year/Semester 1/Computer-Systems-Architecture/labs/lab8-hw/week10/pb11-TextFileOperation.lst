     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fprintf, fopen, fclose, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import fprintf msvcrt.dll
    10                                  import scanf msvcrt.dll 
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import printf msvcrt.dll   ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 646174612E74787400          file_name db "data.txt", 0   ; filename to be created
    20 00000009 7700                        access_mode db "w", 0       ; file access mode:
    21                                                                  ; w - creates an empty file for writing
    22 0000000B FFFFFFFF                    file_descriptor dd -1       ; variable to hold the file descriptor
    23                                      
    24 0000000F 25730A00                    format1 db "%s", 10, 0
    25 00000013 257300                      format2 db "%s", 0
    26 00000016 00                          input db "", 0
    27                                      
    28                                      ; A file name is given (defined in the data segment). Create a file with the given name,
    29                                      ;then read words from the keyboard and write those words in the file, 
    30                                      ;until character '$' is read from the keyboard.
    31                                      
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; ...
    36                                          
    37 00000000 68[09000000]                    push dword access_mode     
    38 00000005 68[00000000]                    push dword file_name
    39 0000000A FF15[00000000]                  call [fopen]
    40 00000010 83C408                          add esp, 8
    41                                          
    42 00000013 A3[0B000000]                    mov [file_descriptor], eax
    43                                          
    44 00000018 83F800                          cmp eax, 0
    45 0000001B 7447                            je end
    46                                          
    47                                          
    48 0000001D B324                            mov bl, "$"
    49                                          
    50                                          my_loop:
    51                                          
    52 0000001F 68[16000000]                        push dword input
    53 00000024 68[13000000]                        push dword format2
    54 00000029 FF15[00000000]                      call [scanf]
    55 0000002F 83C408                              add esp, 8
    56                                              
    57                                             
    58 00000032 3A1D[16000000]                      cmp bl, [input]
    59 00000038 741B                                je skip
    60                                                
    61 0000003A 68[16000000]                        push dword input
    62 0000003F 68[0F000000]                        push dword format1
    63 00000044 FF35[0B000000]                      push dword [file_descriptor]
    64 0000004A FF15[00000000]                      call [fprintf]
    65 00000050 83C40C                              add esp, 12
    66                                                   
    67 00000053 EBCA                                jmp my_loop
    68                                              
    69                                          
    70                                          skip:
    71                                          
    72 00000055 FF35[0B000000]                      push dword [file_descriptor]
    73 0000005B FF15[00000000]                      call [fclose]
    74 00000061 83C404                              add esp, 4
    75                                              
    76                                              end:
    77                                                  ; exit(0)
    78 00000064 6A00                                    push    dword 0      ; push the parameter for exit onto the stack
    79 00000066 FF15[00000000]                          call    [exit]       ; call exit to terminate the program
