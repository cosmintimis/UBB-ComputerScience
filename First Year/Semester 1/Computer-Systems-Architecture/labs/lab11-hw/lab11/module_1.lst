     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  global convertNumberInBase2ToBase16
     3                                  
     4                                  ; declare external functions needed by our program
     5                                  extern exit
     6                                  import exit msvcrt.dll
     7                                  
     8                                  ;data
     9                                  segment data use32 class=data
    10 00000000 02                          base db 2
    11 00000001 000102030405060708-         TabHexa db 0h,1h,2h,3h,4h,5h,6h,7h,8h,9h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
    11 0000000A 090A0B0C0D0E0F     
    12 00000011 257825782578257825-         format5 db "%x%x%x%x%x%x%x%x",0
    12 0000001A 7825782578257800   
    13 00000022 32<rept>                    n times 33 db '2'
    14 00000043 <res 00000009>              x resb 9
    15                                  
    16                                  ;code
    17                                  segment code use32 class=code
    18                                  convertNumberInBase2ToBase16:
    19                                      
    20 00000000 55                          push ebp
    21 00000001 89E5                        mov ebp, esp
    22                                      
    23 00000003 8B4D08                      mov ecx, [ebp + 8]
    24 00000006 890D[22000000]              mov dword [n], ecx
    25                                      
    26 0000000C BE[42000000]                mov esi, n + 32
    27 00000011 B921000000                  mov ecx, 33
    28 00000016 FD                          std
    29                                          
    30                                      .searchForNull:
    31 00000017 AC                              lodsb
    32 00000018 49                              dec ecx
    33 00000019 3C00                            cmp al, 0
    34 0000001B 75FA                            jne .searchForNull
    35                                                
    36 0000001D E340                        jecxz .end
    37                                    
    38 0000001F BF[43000000]                mov edi, x
    39                                          
    40                                      .loop1:
    41 00000024 BB00000000                      mov ebx, 0
    42                                   
    43 00000029 8817                            mov byte [edi], dl
    44 0000002B 47                              inc edi
    45 0000002C 83F900                          cmp ecx, 0
    46 0000002F 742E                            je .out
    47 00000031 66BA0000                        mov dx, 0
    48 00000035 66B80100                        mov ax, 1
    49                                              
    50                                          .loop2:
    51 00000039 6650                                push ax
    52 0000003B AC                                  lodsb
    53 0000003C 2C30                                sub al, '0'
    54 0000003E 3C01                                cmp al, 1
    55 00000040 7507                                jne .skip1
    56 00000042 6658                                pop ax
    57 00000044 6601C2                              add dx, ax
    58                                                  
    59 00000047 EB02                                jmp .skip2
    60                                              .skip1:
    61 00000049 6658                                    pop ax
    62                                              .skip2:
    63                                                  
    64 0000004B F625[00000000]                      mul byte [base]
    65                                                  
    66 00000051 49                                  dec ecx
    67 00000052 83F900                              cmp ecx, 0
    68 00000055 74CD                                je .loop1
    69 00000057 43                                  inc ebx
    70 00000058 83FB04                              cmp ebx,4
    71 0000005B 74C7                                je .loop1
    72 0000005D EBDA                                jmp .loop2           
    73                                                  
    74                                      .out:
    75                                         
    76                                      .end: 
    77                                         
    78                                      ;mov ecx, 8
    79                                     ; mov esi, x + 1
    80                                      ;cld
    81                                      ;mov ebx, TabHexa
    82                                      ;loop3:
    83                                          ;xor eax,eax
    84                                         ; mov al, [esi]
    85                                          ;inc esi
    86                                          ;xlat
    87                                          ;push eax
    88                                      ;loop loop3
    89                                          
    90                                      ;push format5
    91                                      ;call [printf]
    92                                      ;add esp, 4 * 9
    93                                      
    94 0000005F A1[44000000]                mov eax, dword [x+1]
    95                                      
    96 00000064 89EC                        mov esp, ebp
    97 00000066 5D                          pop ebp
    98 00000067 C3                          ret
