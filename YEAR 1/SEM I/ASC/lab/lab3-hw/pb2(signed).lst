     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start     
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf         ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  
    11                                  ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 CE                          a db -50
    18 00000001 C800                        b dw 200
    19 00000003 2C010000                    c dd 300
    20 00000007 E803000000000000            d dq 1000
    21 0000000F 257825780A00                printformat db '%x%x', 10, 0 
    22                                      ; d-(a+b+c)-(a+a) = 650 // 28A
    23                                      ; 1000 - 450 + 100
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29 00000000 A0[00000000]                    mov al, [a]
    30 00000005 6698                            cbw
    31 00000007 98                              cwde ; EAX = a
    32 00000008 BB00000000                      mov ebx, 0
    33 0000000D 668B1D[01000000]                mov bx, word [b]; EBX = b
    34 00000014 01D8                            add eax, ebx
    35 00000016 8B1D[03000000]                  mov ebx, dword [c]
    36 0000001C 01D8                            add eax, ebx ; eax = a + b + c
    37 0000001E 89C3                            mov ebx, eax ; ebx = a + b + c
    38                                          
    39 00000020 A0[00000000]                    mov al, byte [a]
    40 00000025 6698                            cbw
    41 00000027 6601C0                          add ax, ax
    42 0000002A 98                              cwde ; eax = a + a
    43                                          
    44 0000002B 01C3                            add ebx, eax ; ebx = (a+b+c) + (a+a)
    45 0000002D 93                              xchg ebx, eax
    46 0000002E 99                              cdq; edx:eax = (a+b+c) + (a+a)
    47                                         
    48                                          
    49 0000002F 8B1D[07000000]                  mov ebx, dword [d]
    50 00000035 8B0D[0B000000]                  mov ecx, dword [d+4] ; ecx:ebx = d
    51                                          
    52 0000003B 29C3                            sub ebx, eax
    53 0000003D 19D1                            sbb ecx, edx; edx:eax = d - [(a+b+c) + (a+a)] = d - (a+b+c) - (a+a)
    54                                          
    55 0000003F 53                              push ebx
    56 00000040 51                              push ecx
    57 00000041 68[0F000000]                    push printformat
    58 00000046 FF15[00000000]                  call [printf]
    59 0000004C 83C40C                          add esp, 12
    60                                          
    61                                          
    62                                          
    63                                          ; exit(0)
    64 0000004F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 00000051 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
