     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start     
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf         ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  
    11                                  ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 01                          a db 1
    18 00000001 0080                        b dw 32768
    19 00000003 01000000                    c dd 1
    20 00000007 0000000002000000            d dq 8589934592
    21 0000000F 257825780A00                printformat db '%x%x', 10, 0 
    22                                      ;(d-c)+(b-a)-(b+b+b) = 8589869054 // 1fffefffe
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 A1[07000000]                    mov eax, dword [d]
    29 00000005 8B15[0B000000]                  mov edx, dword [d+4]
    30 0000000B 8B1D[03000000]                  mov ebx, dword [c]
    31 00000011 B900000000                      mov ecx, 0 ; ECX:EBC <- c
    32 00000016 29D8                            sub eax, ebx
    33 00000018 19CA                            sbb edx, ecx
    34                                  
    35 0000001A 8A1D[00000000]                  mov bl, byte [a]
    36 00000020 668B0D[01000000]                mov cx, word [b]
    37 00000027 B700                            mov bh, 0
    38 00000029 6629D9                          sub cx,bx
    39                                          
    40 0000002C 6687CB                          xchg cx,bx
    41 0000002F B900000000                      mov ecx, 0
    42 00000034 6687CB                          xchg cx,bx
    43 00000037 BB00000000                      mov ebx, 0
    44 0000003C 01C8                            add eax, ecx
    45 0000003E 11DA                            adc edx, ebx
    46                                          
    47 00000040 BB00000000                      mov ebx, 0
    48 00000045 668B1D[01000000]                mov bx, word[b]
    49 0000004C B900000000                      mov ecx, 0
    50 00000051 29D8                            sub eax, ebx
    51 00000053 19CA                            sbb edx, ecx
    52 00000055 29D8                            sub eax, ebx
    53 00000057 19CA                            sbb edx, ecx
    54 00000059 29D8                            sub eax, ebx
    55 0000005B 19CA                            sbb edx, ecx
    56                                          
    57 0000005D 50                              push eax
    58 0000005E 52                              push edx
    59 0000005F 68[0F000000]                    push printformat
    60 00000064 FF15[00000000]                  call [printf]
    61 0000006A 83C40C                          add esp, 12
    62                                          
    63                                          
    64                                          ; exit(0)
    65 0000006D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 0000006F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
