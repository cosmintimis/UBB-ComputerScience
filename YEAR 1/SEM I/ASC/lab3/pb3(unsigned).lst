     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start     
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf         ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  
    11                                  ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16                                      ; ...
    17 00000000 D0070000                    a dd 2000
    18 00000004 01                          b db 1
    19 00000005 79                          c db 121
    20 00000006 E803000000000000            x dq 1000
    21 0000000E 257825780A00                printformat db '%x%x', 10, 0 
    22                                      ; (a+b)/(2-b*b+b/c)-x = 1001 // 3E9
    23                                      ; 
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29                                          
    30 00000000 A0[04000000]                    mov al, byte [b]
    31 00000005 F6E0                            mul al
    32 00000007 B302                            mov bl, 2
    33 00000009 B700                            mov bh, 0
    34 0000000B 6629C3                          sub bx, ax ; BX = 2 - b*b
    35 0000000E A0[04000000]                    mov al, byte [b]
    36 00000013 B400                            mov ah, 0
    37 00000015 8A0D[05000000]                  mov cl, byte [c]
    38 0000001B F6F1                            div cl; AL = b / c , AH = b % c
    39 0000001D B400                            mov ah, 0
    40 0000001F 6601C3                          add bx, ax
    41 00000022 6689D9                          mov cx, bx
    42 00000025 BB00000000                      mov ebx, 0
    43 0000002A 6689CB                          mov bx, cx ; ebx = (2-b*b+b/c)
    44                                        
    45 0000002D A1[00000000]                    mov eax, dword [a]
    46 00000032 B900000000                      mov ecx, 0
    47 00000037 8A0D[04000000]                  mov cl, byte [b]
    48 0000003D BA00000000                      mov edx, 0
    49 00000042 01C8                            add eax, ecx
    50 00000044 83D200                          adc edx, 0 ; EDX:EAX = a + b
    51                                          
    52 00000047 F7F3                            div ebx ; EAX = (a + b) / (2-b*b+b/c)
    53 00000049 BA00000000                      mov edx, 0 ; 
    54                                          
    55 0000004E 8B1D[06000000]                  mov ebx, dword [x]
    56 00000054 8B0D[0A000000]                  mov ecx, dword [x+4]
    57                                          
    58 0000005A 29D8                            sub eax, ebx
    59 0000005C 19CA                            sbb edx, ecx; EDX:EAX = (a + b) / (2-b*b+b/c) - x
    60                                          
    61 0000005E 50                              push eax
    62 0000005F 52                              push edx
    63 00000060 68[0E000000]                    push printformat
    64 00000065 FF15[00000000]                  call [printf]
    65 0000006B 83C40C                          add esp, 12
    66                                          
    67                                          
    68                                          
    69                                          ; exit(0)
    70 0000006E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 00000070 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
